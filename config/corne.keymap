/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #define Mods 1
// #define Nums 2
// #define Funcs 3
// #define GamingR 4
// #define GamingL 5

/ {
    macros {
        win_term: win_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R) &kp W &kp T &kp RET>;
            label = "WIN_TERM";
        };

        PrevTab: PrevTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(TAB))>;
            label = "PREVTAB";
        };

        NextTab: NextTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>;
            label = "NEXTTAB";
        };

        CtrlShiftV: CtrlShiftV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(V))>;
            label = "CTRLSHIFTV";
        };

        CtrlAltDel: CtrlAltDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(DEL))>;
            label = "CTRLALTDEL";
        };

        WinL: WinL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
            label = "WINL";
        };
    };

    combos {
        compatible = "zmk,combos";

        ESC_Combo {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            timeout-ms = <60>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | L_SHIFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | LCTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //         --           | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R         &kp T        &kp Y      &kp U          &kp I          &kp O    &kp P          &none
&kp LEFT_SHIFT  &kp A  &kp S  &kp D         &kp F         &kp G        &kp H      &kp J          &kp K          &kp L    &kp SEMICOLON  &mt RIGHT_SHIFT SQT
&kp LCTRL       &kp Z  &kp X  &kp C         &kp V         &kp B        &kp N      &kp M          &kp COMMA      &kp DOT  &kp SLASH      &kp RCTRL
                              &kp LEFT_ALT  &lt 1 ESCAPE  &kp SPACE    &lt 2 RET  &kp BACKSPACE  &kp RIGHT_ALT
            >;
        };

        NAVS {
            bindings = <
&trans  &PrevTab  &kp F2        &NextTab   &win_term       &trans          &kp LEFT_ARROW  &kp DOWN_ARROW   &kp UP_ARROW  &kp RIGHT_ARROW  &kp K_CONTEXT_MENU  &trans
&trans  &kp TAB   &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp LEFT_WIN    &kp RIGHT_WIN   &kp RIGHT_SHIFT  &kp RCTRL     &kp RIGHT_ALT    &kp GRAVE           &trans
&trans  &trans    &trans        &trans     &CtrlShiftV     &trans          &kp LS(HOME)    &kp HOME         &kp DEL       &kp END          &kp LS(END)         &trans
                                &trans     &trans          &none           &trans          &kp BACKSPACE    &trans
            >;
        };

        NUMS {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3   &kp LT                &kp GT                   &kp BACKSLASH  &kp EQUAL        &kp BACKSPACE  &kp DEL        &trans         &trans
&trans  &kp N4  &kp N5  &kp N6   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp MINUS      &sk RIGHT_SHIFT  &sk RCTRL      &sk RIGHT_ALT  &kp BACKSPACE  &trans
&trans  &kp N7  &kp N8  &kp N9   &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &trans         &trans           &trans         &CtrlAltDel    &WinL          &trans
                        &kp DOT  &kp N0                &kp SPACE                &trans         &trans           &trans
            >;
        };

        FUNCS {
            bindings = <
&kp F1  &kp F2   &kp F3        &kp F4     &kp F5          &kp F6          &kp F7         &kp F8           &kp F9      &kp F10        &kp F11  &kp F12
&trans  &kp TAB  &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &sk LEFT_WIN    &sk RIGHT_GUI  &sk RIGHT_SHIFT  &sk RCTRL   &sk RIGHT_ALT  &to 4    &trans
&trans  &trans   &bt BT_CLR    &trans     &trans          &trans          &trans         &bt BT_NXT       &bt BT_PRV  &trans         &trans   &trans
                               &trans     &trans          &trans          &trans         &trans           &trans
            >;
        };

        GamingR {
            bindings = <
&kp LEFT_ALT  &kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y    &kp U          &kp I      &kp O    &kp P          &trans
&kp LSHFT     &kp A  &kp S  &kp D  &kp F      &kp G        &kp H    &kp J          &kp K      &kp L    &kp SEMICOLON  &kp LC(LA(DELETE))
&kp LCTRL     &kp Z  &kp X  &kp C  &kp V      &kp B        &kp N    &kp M          &kp COMMA  &kp DOT  &kp SLASH      &to 0
                            &mo 2  &kp SPACE  &lt 5 ESC    &kp RET  &kp BACKSPACE  &trans
            >;
        };

        GamingL {
            bindings = <
&trans  &kp Y  &kp U  &kp I      &kp O    &kp P       &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &trans
&trans  &kp H  &kp J  &kp K      &kp L    &kp SEMI    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH    &trans  &trans  &trans  &trans  &trans  &trans
                      &trans     &trans   &trans      &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        IntoFunctionKeys {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
