/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #define Mods 1
// #define Nums 2
// #define Funcs 3
// #define GamingR 4
// #define GamingL 5

/ {
    macros {
        win_term: win_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R) &kp W &kp T &kp RET>;
            label = "WIN_TERM";
        };
    };

    &lt {
        tapping-term-ms = <140>;
    }

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | L_SHIFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | LCTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //         --           | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y    &kp U          &kp I      &kp O    &kp P            &none
&kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F      &kp G        &kp H    &kp J          &kp K      &kp L    &lt 2 SEMICOLON  &mt RIGHT_SHIFT SQT
&kp LCTRL       &kp Z  &kp X  &kp C  &kp V      &kp B        &kp N    &kp M          &kp COMMA  &kp DOT  &kp FSLH         &none
                              &sl 1  &lt 1 ESC  &kp SPACE    &kp RET  &kp BACKSPACE  &sl 3
            >;
        };

        Mods {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans     &kp LS(LC(TAB))  &kp F2        &kp LC(TAB)  &win_term      &none        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp K_CONTEXT_MENU  &none
&trans     &kp TAB          &kp LEFT_ALT  &kp LCTRL    &kp LSHFT      &kp LGUI     &kp RGUI        &kp RSHFT       &kp RCTRL     &kp RALT         &trans              &trans
&kp LCTRL  &none            &none         &none        &kp LC(LS(V))  &none        &kp LS(HOME)    &kp HOME        &kp DELETE    &kp END          &kp LS(END)         &trans
                                          &none        &trans         &kp SPACE    &mo 3           &mo 3           &sl 3
            >;
        };

        Nums {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE   &kp N1  &kp N2  &kp N3      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp BSLH             &kp EQUAL      &none             &none  &none  &none
&kp LSHIFT  &kp N4  &kp N5  &kp N6      &kp LBKT              &kp RBKT                 &kp MINUS            &kp LESS_THAN  &kp GREATER_THAN  &none  &none  &none
&kp LCTRL   &kp N7  &kp N8  &kp N9      &kp PERIOD            &trans                   &none                &kp DELETE     &none             &none  &none  &none
                            &kp PERIOD  &kp NUMBER_0          &kp SPACE                &mt RIGHT_SHIFT RET  &kp BACKSPACE  &none
            >;
        };

        Funcs {
            bindings = <
&kp F1  &kp F2      &kp F3      &kp F4     &kp F5      &kp F6      &kp F7    &kp F8     &kp F9     &kp F10   &kp F11          &kp F12
&trans  &kp LA(F4)  &sk LALT    &sk LCTRL  &sk LSHFT   &sk LGUI    &sk RGUI  &sk RSHFT  &sk RCTRL  &sk RALT  &kp LC(LA(DEL))  &trans
&none   &bt BT_CLR  &bt BT_PRV  &none      &bt BT_NXT  &trans      &trans    &trans     &trans     &trans    &kp LG(L)        &trans
                                &trans     &trans      &trans      &trans    &trans     &trans
            >;
        };

        GamingR {
            bindings = <
&kp LEFT_ALT  &kp Q  &kp W  &kp E  &kp R      &kp T           &kp Y    &kp U          &kp I      &kp O    &kp P   &trans
&kp LSHFT     &kp A  &kp S  &kp D  &kp F      &kp G           &kp H    &kp J          &kp K      &kp L    &trans  &kp LC(LA(DELETE))
&kp LCTRL     &kp Z  &kp X  &kp C  &kp V      &kp B           &kp N    &kp M          &kp COMMA  &kp DOT  &trans  &to 0
                            &mo 2  &kp SPACE  &lt 5 ESCAPE    &kp RET  &kp BACKSPACE  &trans
            >;
        };

        GamingL {
            bindings = <
&trans  &kp Y  &kp U  &kp I      &kp O    &kp P       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp H  &kp J  &kp K      &kp L    &kp SEMI    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH    &trans  &trans  &trans  &trans  &trans  &trans
                      &trans     &trans   &trans      &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        gaming {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
