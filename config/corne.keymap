/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #define Mods 1
// #define Nums 2
// #define Funcs 3
// #define GamingR 4
// #define GamingL 5

/ {
    macros {
        win_term: win_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R) &kp W &kp T &kp RET>;
            label = "WIN_TERM";
        };

        PrevTab: PrevTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(TAB))>;
            label = "PREVTAB";
        };

        NextTab: NextTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>;
            label = "NEXTTAB";
        };

        CtrlShiftV: CtrlShiftV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(V))>;
            label = "CTRLSHIFTV";
        };

        CtrlAltDel: CtrlAltDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(DEL))>;
            label = "CTRLALTDEL";
        };

        WinL: WinL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
            label = "WINL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | L_SHIFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | LCTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //         --           | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R         &kp T          &kp Y                &kp U  &kp I      &kp O    &kp P          &none
&none  &kp A  &kp S  &kp D  &kp F         &kp G          &kp H                &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SQT
&none  &kp Z  &kp X  &kp C  &kp V         &kp B          &kp N                &kp M  &kp COMMA  &kp DOT  &kp FSLH       &none
                     &none  &lt 1 ESCAPE  &lt 2 SPACE    &mt RIGHT_SHIFT RET  &mo 3  &none
            >;
        };

        Sym {
            bindings = <
&trans  &kp GRAVE  &trans        &trans     &trans          &trans          &kp BACKSLASH  &kp EQUAL      &trans            &trans   &trans       &trans
&trans  &trans     &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &sk LEFT_WIN    &kp MINUS      &kp LESS_THAN  &kp GREATER_THAN  &trans   &kp SQT      &trans
&trans  &trans     &trans        &trans     &trans          &trans          &kp LS(HOME)   &kp HOME       &kp DEL           &kp END  &kp LS(END)  &trans
                                 &trans     &trans          &trans          &trans         &trans         &trans
            >;
        };

        Navs {
            bindings = <
&trans  &PrevTab  &kp F2        &NextTab   &win_term       &trans          &trans         &CtrlShiftV    &trans        &CtrlAltDel  &WinL               &trans
&trans  &kp TAB   &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &sk LEFT_WIN    &kp LEFT       &kp DOWN       &kp UP_ARROW  &kp RIGHT    &kp K_CONTEXT_MENU  &trans
&trans  &trans    &trans        &trans     &trans          &trans          &trans         &kp BACKSPACE  &trans        &trans       &trans              &trans
                                &trans     &trans          &none           &kp RIGHT_ALT  &kp BACKSPACE  &trans
            >;
        };

        Num {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &trans         &trans           &trans     &trans         &trans         &trans
&trans  &kp N4  &kp N5  &kp N6  &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &sk RIGHT_WIN  &sk RIGHT_SHIFT  &sk RCTRL  &sk RIGHT_ALT  &kp BACKSPACE  &trans
&trans  &kp N7  &kp N8  &kp N9  &kp DOT               &kp EQUAL                &trans         &trans           &kp DEL    &trans         &trans         &trans
                        &kp N0  &mo 1                 &kp SPACE                &trans         &trans           &trans
            >;
        };

        Funcs {
            bindings = <
&kp F1  &kp F2      &kp F3        &kp F4     &kp F5          &kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans      &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &sk LEFT_WIN    &trans  &trans  &trans  &trans   &trans   &trans
&trans  &bt BT_CLR  &bt BT_PRV    &trans     &bt BT_NXT      &trans          &trans  &trans  &trans  &trans   &trans   &trans
                                  &trans     &trans          &trans          &trans  &trans  &trans
            >;
        };

        GamingR {
            bindings = <
&kp LEFT_ALT  &kp Q  &kp W  &kp E  &kp R      &kp T           &kp Y    &kp U          &kp I      &kp O    &kp P   &trans
&kp LSHFT     &kp A  &kp S  &kp D  &kp F      &kp G           &kp H    &kp J          &kp K      &kp L    &trans  &kp LC(LA(DELETE))
&kp LCTRL     &kp Z  &kp X  &kp C  &kp V      &kp B           &kp N    &kp M          &kp COMMA  &kp DOT  &trans  &to 0
                            &mo 0  &kp SPACE  &lt 6 ESCAPE    &kp RET  &kp BACKSPACE  &trans
            >;
        };

        GamingL {
            bindings = <
&trans  &kp Y  &kp U  &kp I      &kp O    &kp P       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp H  &kp J  &kp K      &kp L    &kp SEMI    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH    &trans  &trans  &trans  &trans  &trans  &trans
                      &trans     &trans   &trans      &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        IntoFunctionKeys {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
